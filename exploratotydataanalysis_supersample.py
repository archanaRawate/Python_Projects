# -*- coding: utf-8 -*-
"""ExploratotyDataAnalysis_SuperSample.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gj-2lTYlz3BGIzGmbY-Hd19DmLNCX2d1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

eda = pd.read_excel("/content/SuperStore Sales DataSet.xlsx") #loading Excel file

eda

eda1 = pd.read_csv("/content/SuperStore_Sales_Dataset.csv", encoding="latin1") #loading csv file

eda1.head(5)

eda1.sample(4)

eda1.info() #

eda1.describe()

eda1.shape

#missing value

eda1.isnull().sum()

eda1["Returns"].fillna(eda1["Returns"].mean(),inplace =True) #if there is NA value then we can fill that with this code

#dropping columns

eda1.drop(columns=["ind1","ind2"])

eda1.head(2)

#univerient analysis

eda1["Ship Mode"].value_counts() #counting the numbers of shipping mode

eda1["Region"].value_counts()

eda1["Sub-Category"].unique()

eda1["City"].unique()

eda1["Payment Mode"] == eda1["Payment Mode"].replace("COD","Cod")

eda1

plt.figsize=(6,3)#defining size
sns.countplot(x = "Ship Mode", data =eda1)
plt.title = ("ount of Shiping Mode")
plt.show()

# prompt: pie chart

import matplotlib.pyplot as plt
plt.figure(figsize=(6, 3))
eda1['Ship Mode'].value_counts().plot(kind='pie', autopct='%1.1f%%', shadow=True)
plt.title=('Pie Chart of Shipping Modes')
plt.savefig("Pie Chart of Shipping Modes")
plt.show()

plt.figure(figsize=(6,3))
eda1["Payment Mode"].value_counts().plot(kind="pie",autopct='%1.1f%%',shadow=True)
plt.title=("Most Use Payment Mode")
plt.savefig("Most Use Payment Mode")
plt.legend(loc=2)

plt.show()

plt.figure(figsize=(6,3))

eda1["Payment Mode"].value_counts().plot(kind="pie",autopct='%1.1f%%',shadow=True)
plt.title=("Most Use Payment Mode")
plt.legend(loc = 2)
plt.show()

#Segment

eda1["Segment"].value_counts()

x= eda1["Segment"].value_counts().index

y= eda1["Segment"].value_counts().values

plt.scatter(x,y)
plt.xlabel("Units")
plt.ylabel("Segmet")
plt.title = ("Scatter plot for Segment Of Orders ")
plt.show()

plt.scatter(x,y)

plt.plot(x,y, c="green", linewidth=2)
plt.xlabel("X ")
plt.ylabel("Y ")
plt.title=("Scatter Plot with Lines")

# Show the plot
plt.show()

plt.boxplot(eda1["Segment"].value_counts().values)
plt.title = ("Sales By Region")
eda1(["Region"].value_counts().values),plot(kind="boxplot",autopct='%1.1f%%',shadow=True)
plt.show()

plt.figure(figsize=(5,3))
eda1["Sales"].plot(kind="density", color="blue", title="Density Plot of Region")
plt.show()

eda1.head(3)

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(5,3))
sns.countplot(x="Segment", data = eda1, hue="Category")
plt.title=("Customer Segment")
plt.show()

plt.figure(figsize=(20,3))
sns.countplot(x="Sub-Category",data=eda1)
plt.title=("Top performer in Sub category")
plt.show()

plt.figure(figsize=(10,5))
sns.countplot(x="Category", data=eda1, hue="Sub-Category")
plt.title=("Top Performer")
plt.legend(loc=2)
plt.show()

plt.figure(figsize=(10,4))
sns.countplot(x="Category", data=eda1[eda1["Category"]=="Office Supplies"], hue = "Sub-Category")
plt.legend(loc=5)
plt.show()

plt.figure(figsize=(8,5))
sns.countplot(x="Category" , data=eda1[eda1["Category"]=="Furniture"],hue= "Sub-Category")
plt.show()

plt.figsize=(6,3)
sns.countplot(x="Category", data=eda1[eda1["Category"]=="Technology"], hue = "Sub-Category")
plt.show()



eda1.info()

#converting a string to a datetime
string_data= "2023-04-10"
datatime_object = pd.to_datetime(string_data)
print(datatime_object)

from datetime import datetime

# Convert the "date_column" to datetime type
eda1["Ship Date1"] = pd.to_datetime(eda1["Ship Date"], format = "%d/%m/%Y")
print(eda1)

eda1["Ship Date"] = pd.to_datetime(eda1["Ship Date"], format="mixed")

eda1["Order_Date"] = pd.to_datetime(eda1["Order Date"], format='mixed')

eda1.info()

eda1["Order Year"]= eda1["Order_Date"].dt.year

eda1["Order Year"].value_counts()

plt.figure(figsize=(6,3))
sns.countplot(x="Order Year", data=eda1, palette=["green","blue"])
plt.title = ("Yearly Order Received")
plt.show()

#profit

sns.barplot(x="Category", y= "Profit", data=eda1,estimator="sum")
plt.show()

plt.figure(figsize=(10,3))
sns.pointplot(x="Sub-Category", y= "Profit", data=eda1,estimator="mean")
plt.xticks(rotation=90)

plt.show()

eda1["State"].value_counts()

plt.figure(figsize=(6,3))

State_counts = eda1["State"].value_counts().head(3)
State_counts.plot(kind="line")

plt.xlabel("State")
plt.ylabel("Number Of Orders")
plt.xticks(rotation=90)
plt.show()
print("Top 3 performer. Star is California state as it has maximum sales")



plt.figure(figsize=(6,3))

State_counts = eda1["State"].value_counts().head(7)
State_counts.plot(kind="line")

plt.xlabel("State")
plt.ylabel("Number Of Orders")
plt.xticks(rotation=90)
plt.show()
print("Top performers. Star is California state as it has maximum sales around 1200")

eda1["State"].value_counts().head(5)

eda1["State"].value_counts()[:10]

plt.figure(figsize=(6,3))
sns.barplot(x = "Category", y="Profit",data=eda1, ci=95, n_boot=100)
plt.show()

#max profit earned by Technology Category

eda1["Sales"] = pd.to_numeric(eda1["Sales"])

plt.figure(figsize=(6,3))
sns.boxenplot(x ="Category", y="Sales", data=eda1)
plt.title=("Top Saler category")

plt.figure(figsize=(6,3))
sns.barplot(x = "Sub-Category", y="Profit",data=eda1, ci=95, n_boot=100)
plt.xticks(rotation=90)

plt.show()

#For graph we conclude maximum profit earned by sub category copies  it means profit margin was good

plt.figure(figsize=(6,3))
sns.barplot(x = "Sub-Category", y="Sales",data=eda1, ci=95, n_boot=100)
plt.xticks(rotation=90)

plt.show()
print("For graph we can conclude that the top sales received by sub category Copies and it follows by Machinery So maximum business coming from this sub categories")
print("Company need to improve srategies for sales in Art, Envelops, paper, labels as this subcategories sales is bottom line")



